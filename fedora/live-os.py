#!/usr/bin/env python3
"""
This file is part of the MusiKernel project, Copyright MusiKernel Team

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
"""

import argparse
import os

choices = {
    "gnome": (
        "/usr/share/spin-kickstarts/fedora-live-workstation.ks",
        "Gnome",
    ),
    "lxde": (
        "/usr/share/spin-kickstarts/fedora-live-lxde.ks",
        "LXDE",
    ),
    "xfce": (
        "/usr/share/spin-kickstarts/fedora-live-xfce.ks",
        "XFCE",
    ),
    "kde": (
        "/usr/share/spin-kickstarts/fedora-live-kde.ks",
        "KDE",
    ),
    "mate": (
        "/usr/share/spin-kickstarts/fedora-live-mate_compiz.ks",
        "Mate",
    ),
}
try:
    import dnf
    db = dnf.dnf.Base()
    releasever = db.conf.substitutions['releasever']
except Exception as ex:
    print("Could not read dnf database, setting default releasever=33")
    print(ex)
    releasever = "33"

parser = argparse.ArgumentParser(
    description=(
        "Generate a Fedora based live distro image with Musikernel "
        "pre-installed"
    )
)
parser.add_argument(
    "--de",
    choices=sorted(choices.keys()),
    default="kde",
    help="The desktop environment, (default: kde)",
)
parser.add_argument(
    '--releasever',
    default=releasever,
    help="The release of Fedora to base the OS image on.  Default: {}".format(
        releasever
    ),
)
args = parser.parse_args()

if not os.getuid() == 0:
    print("Error, this must be run as root.  Use su or sudo")
    exit(1)

ks_file, de_label = choices[args.de]

if not os.path.exists(ks_file):
    print(
        "{} not found, please run "
        "'sudo dnf install spin-kickstarts'".format(
            ks_file,
        )
    )
    print(
        "If spin-kickstarts is already installed, Fedora may have changed "
        "the file name or removed it in a recent release"
    )
    exit(1)

os.system("setenforce 0")

pydaw_version_file = open("../src/major-version.txt")
global_pydaw_version = pydaw_version_file.read().strip()
pydaw_version_file.close()

pydaw_version_file = open("../src/minor-version.txt")
pydaw_version = pydaw_version_file.read().strip()
pydaw_version_file.close()

pydaw_rpm_file = None

global_rpm_dir = os.path.abspath("{}/..".format(os.getcwd()))

pydaw_rpm_file = None

for f_rpm_file in os.listdir(global_rpm_dir):
    if f_rpm_file.startswith(global_pydaw_version) and \
    f_rpm_file.endswith(".rpm") and \
    pydaw_version in f_rpm_file and \
    "debuginfo" not in f_rpm_file:
        pydaw_rpm_file = f_rpm_file
        print("Using {}".format(pydaw_rpm_file))

if pydaw_rpm_file is None:
    print("No MusiKernel .rpm files with current version {} found in {}, \n"
        "please run the following commands before running this script:".format(
        pydaw_version, global_rpm_dir))
    print("\n\ncd ..")
    print("./rpm.py")
    print("cd fedora")
    exit(1)

rpm_file = open("{}/{}".format(global_rpm_dir, pydaw_rpm_file), "rb")
rpm_bytes = rpm_file.read()
rpm_file.close()

kickstart_template = \
"""#kickstart file for PyDAW-OS-Fedora, generated by {script_path}

%include {ks_file}

%packages

#MusiKernel Dependencies
alsa-lib-devel
fftw-devel
lame
liblo-devel
libsndfile-devel
portaudio-devel
portmidi-devel
python3-devel
python3-numpy
python3-qt5
rubberband
vorbis-tools

#Not actually dependencies, but giving people with Firewire devices
#a fighting chance of being able to use the live DVD/USB after an excessive
#amount of configuration
ffado
qjackctl

%end

%post

sed -i s/SELINUX=enforcing/SELINUX=disabled/g /etc/selinux/config

%end

%post --interpreter /usr/bin/python3

# embed the Musikernel rpm file into the kickstart template, to subvert the
# need to setup a Yum respository somewhere on the internet, or worry about DNS

import os

my_rpm_file = open("/tmp/pydaw.rpm", "wb")
my_rpm_file.write({rpm_bytes})
my_rpm_file.close()

os.system("rpm -ivh /tmp/pydaw.rpm")

%end
""".format(
    script_path=os.path.abspath(__file__),
    ks_file=ks_file,
    rpm_bytes=str(rpm_bytes),
)

kickstart_file = open("kickstart.ks", "w")
kickstart_file.write(kickstart_template)
kickstart_file.close()

#TODO:  Maybe use --base-on=live-cd.iso and then run yum update ?
#Or automate a chroot into tmpdir afterwards?

kickstart_command = """\
livecd-creator \
--verbose \
--config=./kickstart.ks \
--fslabel=MusiKernel-OS-Fedora \
--cache=cache/live \
--releasever={releasever} \
""".format(
    releasever=args.releasever,
)
print(kickstart_command)
os.system(kickstart_command)

fname = "MusiKernel-OS-{}-Fedora-{}-{}.iso".format(
    pydaw_version,
    args.releasever,
    de_label,
)
os.system(
    'mv MusiKernel-OS-Fedora.iso {}'.format(fname)
)

#os.system("setenforce 1")
